// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VRVideoPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;
enum Mode : NSInteger;

SWIFT_CLASS("_TtC13VRVideoPlayer16FullScreenButton")
@interface FullScreenButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
/// Tell the button what’s it’s current state or mode.
/// This method configure the button icons based on it’s mode.
/// \param mode determines the current button mode, <code>fullScreen</code> or <code>normal</code>.
///
- (void)setWithMode:(enum Mode)mode;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface FullScreenButton (SWIFT_EXTENSION(VRVideoPlayer))
@end

typedef SWIFT_ENUM(NSInteger, Appearance, closed) {
  AppearanceDark = 0,
  AppearanceLight = 1,
};

typedef SWIFT_ENUM(NSInteger, Background, closed) {
  BackgroundVibrant = 0,
  BackgroundOpaque = 1,
};

/// Determines de horizontal position.
typedef SWIFT_ENUM(NSInteger, HPosition, closed) {
  HPositionRight = 0,
  HPositionLeft = 1,
};

/// Determines de vertical position.
typedef SWIFT_ENUM(NSInteger, VPosition, closed) {
  VPositionTop = 0,
  VPositionBottom = 1,
};

typedef SWIFT_ENUM(NSInteger, Mode, closed) {
  ModeFullScreen = 0,
  ModeNormal = 1,
};

typedef SWIFT_ENUM(NSInteger, RotationMode, closed) {
  RotationModeUp = 0,
  RotationModeDown = 1,
  RotationModeLeft = 2,
  RotationModeRight = 3,
};



@protocol VRVideoViewDelegate;
@class NSBundle;

/// Displays a video in 360º, uses device motion and gestures recognizers to nagivate throughout the video.
SWIFT_CLASS("_TtC13VRVideoPlayer11VRVideoView")
@interface VRVideoView : UIViewController
@property (nonatomic, strong) id <VRVideoViewDelegate> _Nullable delegate;
/// Creates a VRVideoView object to display a video in 360º with the provided information.
/// \param url video URL to display in the view.
///
/// \param frame display position and size to display the video in.
///
/// \param autoPlay determines whether or not the video should start playing automatically. Defaults to <code>true</code>.
///
/// \param showFullScreenButton determines whether or not the view should have the Full Screen Button visible.
///
- (nonnull instancetype)initWithShow:(NSURL * _Nonnull)url in:(CGRect)frame autoPlay:(BOOL)autoPlay showFullScreenButton:(BOOL)showFullScreenButton OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLayoutSubviews;
- (BOOL)shouldHideTransitionView SWIFT_WARN_UNUSED_RESULT;
- (void)play;
- (void)pause;
/// Rotates the <code>view</code> by the given angle.
/// \param angle Must be a floating point value [in Radians].
///
- (void)rotateBy:(float)angle;
/// Rotates the <code>view</code> to the given <code>RotationMode</code>
/// \param mode mode to rotate the view.
///
/// \param animated whether we should animate this transition or not.
///
/// \param duration Total duration of the animations, measured in seconds.
/// When <code>animated</code> is false, this value defaults to 0.0.
///
- (void)rotate:(enum RotationMode)mode animated:(BOOL)animated duration:(double)duration;
/// Updates the player with the given URL.
/// If this method gets called with the same URL that is currently playing,
/// it just <code>refresh</code> the video playback.
/// <h2>Refreshing policy</h2>
/// This method assumes your video is a live-streaming, that means when updating it, we try to play to the most up-to-date video playback time.
/// Remember, this policy only applies when you pass the same URL that is currently playing. If you pass a new URL, this method
/// just loads and play as it’s supposed to do.
/// note:
/// This method follows the <code>autoPlay</code> policy dictated at initialization time.
/// \param url new url to update from.
///
- (void)updateWithUrl:(NSURL * _Nonnull)url;
/// Updates the player with the given URL.
/// If this method gets called with the same URL that is currently playing,
/// it just <code>refresh</code> the video playback.
/// <h2>Refreshing policy</h2>
/// By <code>refresh</code> we mean that if the <code>isStreaming</code> property is true, it plays from the most up-to-date video playback time.
/// Otherwise, if <code>isStreaming</code> is false, the player starts playing the video from the beginning.
/// Remember, this policy only applies when you pass the same URL that is currently playing. If you pass a new URL, this method
/// just loads and play as it’s supposed to do.
/// note:
/// This method follows the <code>autoPlay</code> policy dictated at initialization time.
/// \param url new url to update from.
///
/// \param isStreaming if true, refresh the video from the most up-to-date playback time, otherwise, plays from the beginning.
///
- (void)updateWithUrl:(NSURL * _Nonnull)url isStreaming:(BOOL)isStreaming;
/// Invalidates the current playing video. Basically this throw away the video it was playing.
/// To continue playing the same video you stopped, call <code>.startOver()</code> or <code>.startOver(streaming:)</code> methods.
- (void)stop;
/// Starts over the current playing video.
/// Call this method after you stopped a video and want to play it again. [i.e. after calling the <code>.stop()</code> method.]
/// If you call this method and there’s a playing video, we apply the following policy:
/// <h2>Refreshing policy</h2>
/// This method assumes your video is a live-streaming, that means when updating it, we try to play to the most up-to-date video playback time.
/// note:
/// This method follows the <code>autoPlay</code> policy dictated at initialization time.
- (void)startOver;
/// Starts over the current playing video.
/// Call this method after you stopped a video and want to play it again. [i.e. after calling the <code>.stop()</code> method.]
/// If you call this method and there’s a playing video, we apply the following policy:
/// <h2>Refreshing policy</h2>
/// By <code>refresh</code> we mean that if the <code>streaming</code> property is true, it plays from the most up-to-date video playback time.
/// Otherwise, if <code>isStreaming</code> is false, the player starts playing the video from the beginning.
/// note:
/// This method follows the <code>autoPlay</code> policy dictated at initialization time.
- (void)startOverWithStreaming:(BOOL)streaming;
/// Sets the current video frame to fill the screen bounds.
/// \param animated whether we should animate this transition or not.
///
/// \param duration Total duration of the animations, measured in seconds.
/// When <code>animated</code> is false, this value defaults to 0.0.
///
- (void)fullScreenWithAnimated:(BOOL)animated duration:(double)duration;
/// Undo the current full screen, if any.
/// This method just dismiss the current <code>VRVideoView</code>.
/// \param animated whether we should animate this transition or not.
///
- (void)undoFullScreenWithAnimated:(BOOL)animated duration:(double)duration;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




@interface VRVideoView (SWIFT_EXTENSION(VRVideoPlayer))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

enum VideoStatus : NSInteger;

SWIFT_PROTOCOL("_TtP13VRVideoPlayer19VRVideoViewDelegate_")
@protocol VRVideoViewDelegate
/// This method gets called every time the <code>VideoView</code> update it’s video.
/// This method gets called after the corresponding specific status method.
/// [i.e. when a <code>.loading</code> status gets fired,
/// first we invoke the <code>loadingVideo()</code> method, and then this method gets called.]
/// \param status new video status.
///
- (void)videoStatusChangedToStatus:(enum VideoStatus)status;
- (void)loadingVideo;
- (void)readyToPlayVideo;
- (void)failedToLoadVideo;
@end

typedef SWIFT_ENUM(NSInteger, VideoStatus, closed) {
  VideoStatusLoading = 0,
  VideoStatusReadyToPlay = 1,
  VideoStatusFailed = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
